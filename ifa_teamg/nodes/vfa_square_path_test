#!/usr/bin/env python

import rospy
from std_srvs.srv import Trigger, TriggerRequest
from sensor_msgs.msg import JointState
from control_msgs.msg import FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint

import hello_helpers.hello_misc as hm
import math


class Square_Path_Test(hm.HelloNode):

    def __init__(self):
        hm.HelloNode.__init__(self)

	self.rate = 10.0

        self.square_side = 3.5
        self.rotation_angle = -math.pi/2  # In radians
        self.mode = 'position'
        self.straight_command = {'joint': 'translate_mobile_base', 'inc': self.square_side}
        self.cw_command = {'joint': 'rotate_mobile_base', 'inc': -self.rotation_angle}
        self.ccw_command = {'joint': 'rotate_mobile_base', 'inc': self.rotation_angle}

    #def display_test_stats():

    def straight_motion(self, goal_point, trajectory_goal):

	joint_name = self.straight_command['joint']
        trajectory_goal.trajectory.joint_names = [joint_name]

        goal_point.positions = [self.straight_command['inc']]
        trajectory_goal.trajectory.points = [goal_point]
        trajectory_goal.trajectory.header.stamp = rospy.Time.now()
        self.trajectory_client.send_goal(trajectory_goal)

	self.trajectory_client.wait_for_result()

    def back_motion(self, goal_point, trajectory_goal):

	joint_name = self.straight_command['joint']
        trajectory_goal.trajectory.joint_names = [joint_name]

        goal_point.positions = [-self.straight_command['inc']]
        trajectory_goal.trajectory.points = [goal_point]
        trajectory_goal.trajectory.header.stamp = rospy.Time.now()
        self.trajectory_client.send_goal(trajectory_goal)

	self.trajectory_client.wait_for_result()

    def rotate(self, goal_point, trajectory_goal):

	joint_name = self.cw_command['joint']
        trajectory_goal.trajectory.joint_names = [joint_name]

        goal_point.positions = [self.cw_command['inc']]
        trajectory_goal.trajectory.points = [goal_point]
        trajectory_goal.trajectory.header.stamp = rospy.Time.now()
        self.trajectory_client.send_goal(trajectory_goal)

	self.trajectory_client.wait_for_result()

	

    def begin_test_cw(self):

	rate = rospy.Rate(self.rate)
	
        goal_point = JointTrajectoryPoint()
        goal_point.time_from_start = rospy.Duration(0.0)
        trajectory_goal = FollowJointTrajectoryGoal()
        trajectory_goal.goal_time_tolerance = rospy.Time(1.0)

	#while True:
	self.straight_motion(goal_point, trajectory_goal)
	#self.back_motion(goal_point, trajectory_goal)
	self.rotate(goal_point, trajectory_goal)
	self.straight_motion(goal_point, trajectory_goal)
	self.rotate(goal_point, trajectory_goal)
	self.straight_motion(goal_point, trajectory_goal)
	self.rotate(goal_point, trajectory_goal)
	self.straight_motion(goal_point, trajectory_goal)
	self.rotate(goal_point, trajectory_goal)

        #joint_name = self.straight_command['joint']
        #trajectory_goal.trajectory.joint_names = [joint_name]

        #goal_point.positions = [self.straight_command['inc']]
        #trajectory_goal.trajectory.points = [goal_point]
        #trajectory_goal.trajectory.header.stamp = rospy.Time.now()
        #self.trajectory_client.send_goal(trajectory_goal)

	#self.trajectory_client.wait_for_result()


	#joint_name = self.cw_command['joint']
        #trajectory_goal.trajectory.joint_names = [joint_name]

        #goal_point.positions = [self.cw_command['inc']]
        #trajectory_goal.trajectory.points = [goal_point]
        #trajectory_goal.trajectory.header.stamp = rospy.Time.now()
        #self.trajectory_client.send_goal(trajectory_goal)

	#self.trajectory_client.wait_for_result()

	

    def main(self):
	hm.HelloNode.main(self,'vfa_square_path', 'vfa_square_path', wait_for_first_pointcloud=False)

if __name__ == '__main__':

    try:
        node = Square_Path_Test()
	node.main()
	node.begin_test_cw()
	#rospy.init_node('cw_test_server')
	#s = rospy.Service('start_cw', Trigger, node.begin_test_cw)

    except KeyboardInterrupt:
        rospy.loginfo('interrupt received bro!!! Gotcha!')
