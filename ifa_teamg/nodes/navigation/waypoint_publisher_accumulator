#!/usr/bin/env python

from logging.config import valid_ident
from re import X

import time

from cv2 import line
import rospy
from std_srvs.srv import Trigger, TriggerRequest
from sensor_msgs.msg import JointState, PointCloud2, LaserScan
from control_msgs.msg import FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist, PoseStamped
from nav_msgs.msg import Path
from ifa_teamg.msg import PotLine
from visualization_msgs.msg import MarkerArray, Marker

from move_base_msgs.msg import MoveBaseActionGoal

import bisect

#for quaternion tranformation from Euler to Quaternion
from tf.transformations import quaternion_from_euler

from scipy import optimize

import math
import ros_numpy as rnp
# from ros_numpy import point_cloud2
import numpy as np

import tf
import tf2_ros

import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal


class NavPlanner():

    def __init__(self):

        self.rate = 10.0

        self.explore_goal = None

        self.waypoints = []

        self.pot_lines = []

        self.aruco_count_1 = 0

        self.aruco_count_2 = 0

        self.insight_aruco = None

        self.insight_aruco_odom = None

        self.aruco_update_dist_threshold = 0.2

        # self.explore_goal = PoseStamped()
        # self.explore_goal.header.frame_id = 'base_link'

        self.waypoint_tracking_list = []

        self.turn_goals = [None, None, None, None]

        self.turn_goals_odom = [None, None, None, None]

        self.mode = 'exploit'

        self.aruco_new = False

        self.allow_aruco_callbacks = True

        #Line parameters in the bse_link after processing LiDAR
        self.m = None
        self.c = None

        self.detection_exes = []
        self.detection_list = []
        self.detection_goals = []
        
        self.aruco_goal_array_pub = rospy.Publisher("aruco_goal_markers", MarkerArray, queue_size=1)

        #RVIZ Publisher to visualize goal being tracked
        self.viz_goal_pub = rospy.Publisher("/current_nav_goal", PoseStamped, queue_size=1)

    #def display_test_stats()

    def PickAWaypoint(self):
        now = rospy.Time.now()
        if self.mode == 'explore':
            if self.explore_goal:
                # print(self.explore_goal)
                if self.insight_aruco_odom:
                    print("Aruco Exists")
                    
                    # for test in range(500):
                        # try:
                    # print(self.insight_aruco_odom)
                    self.insight_aruco_odom.header.stamp = now
                    # print("Initializing")
                    self.tf_listener.waitForTransform("/base_link", "/odom", now, rospy.Duration(1))
                    # aruco_odom = self.tf_listener.transformPose("/odom", self.insight_aruco)
                    aruco_base_new = self.tf_listener.transformPose("/base_link", self.insight_aruco_odom)
                            # break
                        # except:
                            # print("Waiting for TF to become available")
                            # pass
                    # print(test)
                    # print(aruco_base_new)

                    if (aruco_base_new.pose.position.x - self.explore_goal.pose.position.x) > 0.3:
                        print("Exploring and Checking Aruco")
                        # print("Time now in explore checking", self.explore_goal.header.stamp)
                        try:
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                        except:
                            self.explore_goal.header.stamp = now
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)

                        goal = MoveBaseGoal()
                        goal.target_pose.header.frame_id = "odom"
                        goal.target_pose.header.stamp = rospy.Time.now()
                        goal.target_pose.pose.position = goalpt.pose.position
                        goal.target_pose.pose.orientation = goalpt.pose.orientation

                        #For goal visualization
                        self.viz_goal_pub.publish(goalpt)

                        self.movebase_client.send_goal(goal)
                        wait = self.movebase_client.wait_for_result()
                
                    elif ((aruco_base_new.pose.position.x - self.explore_goal.pose.position.x) <= 0.3 and (self.insight_aruco.pose.position.x - self.explore_goal.pose.position.x) > 0 and self.aruco_new==True):
                        print("Sending Aruco Goal")

                        self.aruco_new = False
                        self.allow_aruco_callbacks = False

                        for i in range(4):
                            # goalpt = self.tf_listener.transformPose("/odom", self.turn_goals_odom[i])
                            goal = MoveBaseGoal()
                            goal.target_pose.header.frame_id = "odom"
                            goal.target_pose.header.stamp = rospy.Time.now()
                            # goal.target_pose.pose.position = goalpt.pose.position
                            # goal.target_pose.pose.orientation = goalpt.pose.orientation

                            goal.target_pose.pose.position = self.turn_goals_odom[i].pose.position
                            goal.target_pose.pose.orientation = self.turn_goals_odom[i].pose.orientation
                            
                            
                            print("Sent Aruco point ", i)
                            print("The goal sent to nav is:", goal)

                            #For goal visualization
                            self.viz_goal_pub.publish(self.turn_goals_odom[i])

                            self.movebase_client.send_goal(goal)
                            wait = self.movebase_client.wait_for_result()
                            
                            print("Completed Aruco goal ", i)

                        self.allow_aruco_callbacks = True


                        


                else:
                    print("Exploring but no aruco in sight")

                    try:
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                    except:
                            self.explore_goal.header.stamp = now
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                    
                    # print("After listener")
                    goal = MoveBaseGoal()
                    goal.target_pose.header.frame_id = "odom"
                    goal.target_pose.header.stamp = rospy.Time.now()
                    goal.target_pose.pose.position = goalpt.pose.position
                    goal.target_pose.pose.orientation = goalpt.pose.orientation
                    # print("a")

                    if not (self.explore_goal.pose.position.x ==0 and self.explore_goal.pose.position.y ==0):
                        print("Sending Goal")

                        #For goal visualization
                        self.viz_goal_pub.publish(goalpt)

                        self.movebase_client.send_goal(goal)
                        wait = self.movebase_client.wait_for_result()
                        # print("b")

                # except:
                #     pass

        elif self.mode == 'exploit':
            # print("In exploit")
            if self.explore_goal:
                # print(self.explore_goal)
                if self.insight_aruco_odom:

                    
                
                    if self.detection_exes:
                        print(self.detection_exes)
                        print("Aruco Exists")
                        # for test in range(500):
                            # try:
                        # print(self.insight_aruco_odom)
                        self.insight_aruco_odom.header.stamp = now
                        # print("Initializing")
                        self.tf_listener.waitForTransform("/base_link", "/odom", now, rospy.Duration(1))
                        # aruco_odom = self.tf_listener.transformPose("/odom", self.insight_aruco)
                        aruco_base_new = self.tf_listener.transformPose("/base_link", self.insight_aruco_odom)
                                # break
                            # except:
                                # print("Waiting for TF to become available")
                                # pass
                        # print(test)
                        # print(aruco_base_new)

                        if (aruco_base_new.pose.position.x > self.detection_exes[0]):
                            print("Exploiting and Checking Aruco")
                            # print("Time now in explore checking", self.explore_goal.header.stamp)
                            try:
                                goalpt = self.tf_listener.transformPose("/odom", self.detection_goals[0])
                            except:
                                self.explore_goal.header.stamp = now
                                goalpt = self.tf_listener.transformPose("/odom", self.detection_goals[0])

                            goal = MoveBaseGoal()
                            goal.target_pose.header.frame_id = "odom"
                            goal.target_pose.header.stamp = rospy.Time.now()
                            goal.target_pose.pose.position = goalpt.pose.position
                            goal.target_pose.pose.orientation = goalpt.pose.orientation

                            #For goal visualization
                            self.viz_goal_pub.publish(self.detection_goals[0])

                            self.movebase_client.send_goal(goal)
                            wait = self.movebase_client.wait_for_result()

                            #Delete the first goal from the list of detections
                            #after tracking it from the list
                            self.detection_exes.pop(0)
                            self.detection_list.pop(0)
                            self.detection_goals.pop(0)
                    
                        elif (self.aruco_new==True):
                            print("Sending Aruco Goal")

                            self.aruco_new = False
                            self.allow_aruco_callbacks = False

                            for i in range(4):
                                # goalpt = self.tf_listener.transformPose("/odom", self.turn_goals_odom[i])
                                goal = MoveBaseGoal()
                                goal.target_pose.header.frame_id = "odom"
                                goal.target_pose.header.stamp = rospy.Time.now()
                                # goal.target_pose.pose.position = goalpt.pose.position
                                # goal.target_pose.pose.orientation = goalpt.pose.orientation

                                goal.target_pose.pose.position = self.turn_goals_odom[i].pose.position
                                goal.target_pose.pose.orientation = self.turn_goals_odom[i].pose.orientation
                                
                                
                                print("Sent Aruco point ", i)
                                print("The goal sent to nav is:", goal)

                                #For goal visualization
                                self.viz_goal_pub.publish(self.turn_goals_odom[i])

                                self.movebase_client.send_goal(goal)
                                wait = self.movebase_client.wait_for_result()
                                
                                print("Completed Aruco goal ", i)

                            self.allow_aruco_callbacks = True

                    
                    else:
                        print("No detections so just exploring")
                        try:
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                        except:
                            self.explore_goal.header.stamp = now
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)

                        goal = MoveBaseGoal()
                        goal.target_pose.header.frame_id = "odom"
                        goal.target_pose.header.stamp = rospy.Time.now()
                        goal.target_pose.pose.position = goalpt.pose.position
                        goal.target_pose.pose.orientation = goalpt.pose.orientation

                        #For goal visualization
                        self.viz_goal_pub.publish(goalpt)

                        self.movebase_client.send_goal(goal)
                        wait = self.movebase_client.wait_for_result()


                        


                else:
                    print("Exploring but no aruco in sight")

                    try:
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                    except:
                            self.explore_goal.header.stamp = now
                            goalpt = self.tf_listener.transformPose("/odom", self.explore_goal)
                    
                    # print("After listener")
                    goal = MoveBaseGoal()
                    goal.target_pose.header.frame_id = "odom"
                    goal.target_pose.header.stamp = rospy.Time.now()
                    goal.target_pose.pose.position = goalpt.pose.position
                    goal.target_pose.pose.orientation = goalpt.pose.orientation
                    # print("a")

                    if not (self.explore_goal.pose.position.x ==0 and self.explore_goal.pose.position.y ==0):
                        print("Sending Goal")
                        self.movebase_client.send_goal(goal)
                        wait = self.movebase_client.wait_for_result()
        else:
            print("No Waypoints or Pots to Track")

    def odom_update(self, odom_feedback):

        self.x_current = odom_feedback.pose.pose.position.x
        self.y_current = odom_feedback.pose.pose.position.y


    def UpdateLine(self, potLines):

        # print("In pot line updates")

        # self.explore_goal = PoseStamped()
        
        self.pot_lines = potLines
        
        #print(self.pot_lines)
        # print(self.pot_lines.points[0].x)

        self.m = (self.pot_lines.points[1].y - self.pot_lines.points[0].y)/(self.pot_lines.points[1].x - self.pot_lines.points[0].x)
        self.c = self.pot_lines.points[0].y - (self.m*self.pot_lines.points[0].x)
        rad = np.arctan(self.m)

        tmpgoal = PoseStamped()

        # print("In Lidar Point Update")

        tmpgoal.header.stamp = self.pot_lines.header.stamp
        # print("Timestamp of last explore goal input", self.pot_lines.header.stamp)
        tmpgoal.header.frame_id = '/base_link'
        tmpgoal.pose.position.x = 0.3*self.pot_lines.points[1].x
        tmpgoal.pose.position.y = 0.3*self.pot_lines.points[1].y
        tmpgoal.pose.position.z = 0
        orientation = quaternion_from_euler(0,0,rad)
        orientation = orientation/np.linalg.norm(orientation)
        tmpgoal.pose.orientation.x = orientation[0]
        tmpgoal.pose.orientation.y = orientation[1]
        tmpgoal.pose.orientation.z = orientation[2]
        tmpgoal.pose.orientation.w = orientation[3]
        self.explore_goal = tmpgoal

        # print(self.explore_goal)
        # TransformerROS.transformPose("odom", tmpgoal)


    def UpdateArucoEnd(self, marker_pose):
        #id=59
        # should be incremented here

        # print("Updating Aruco End")

        if self.allow_aruco_callbacks:

            self.aruco_new = True

            # print(marker_pose.header.stamp)

            #check if new aruco_marker position is out of threshold of self.current_aruco_pos
            # if np.linalg.norm([marker_pose.pose.position.x - self.insight_aruco.pose.position.x, marker_pose.pose.position.y - self.insight_aruco.pose.position.y, marker_pose.pose.position.z - self.insight_aruco.pose.position.z])>self.aruco_update_dist_threshold:
                #if true - store self.current_aruco_loc = aruco_marker.position
            self.insight_aruco = marker_pose  ## Always will be in base_link

            # print(marker_pose.header.stamp)
            # print("ENDARUCO START")
            self.tf_listener.waitForTransform("odom", "base_link", marker_pose.header.stamp, rospy.Duration(1))
            self.insight_aruco_odom = self.tf_listener.transformPose("odom", marker_pose)
            # print("ENDARUCO ODOM CONVERTER")
            # aruco_base_new = self.tf_listener.transformPose("/base_link", aruco_odom)
            # print(self.insight_aruco_odom)
            # print("Before aruco goal creation")
            # print(self.pot_lines)
            if self.pot_lines:

            # if True:
                
                goalmarkers = MarkerArray()
                # self.turn_goals = []

                # print("We're in aruco end goal creation")

                # arpt = TransformerROS.transformPose("base_link", self.insight_aruco)
                a = self.insight_aruco.pose.position.x
                b = self.insight_aruco.pose.position.y

                A = np.array([[self.m, -1],[1, self.m]],)
                b = np.array([-self.c, self.m*b + a])

                X = np.linalg.solve(A,b)
                rad = np.arctan(self.m)
                
                #print(X)

                goalpose = PoseStamped()
                goalpose.header.stamp = self.insight_aruco.header.stamp
                goalpose.header.frame_id = 'base_link'

                aruco1_baselink = np.array([[np.cos(rad), -np.sin(rad), 0,  X[0]],[np.sin(rad), np.cos(rad), 0, X[1]], [0, 0, 1, 0], [0,0,0,1]])

                goalpose.pose.position.x = X[0]
                goalpose.pose.position.y = X[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[0] = goalpose
                self.turn_goals_odom[0] = self.tf_listener.transformPose("odom", goalpose)

                xcon = np.matmul(aruco1_baselink,np.array([0.7,-0.5,0,1]))

                # print(aruco1_baselink)
                #print(xcon)

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad - np.pi/2)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[1] = goalpose
                self.turn_goals_odom[1] = self.tf_listener.transformPose("odom", goalpose)

                xcon = np.matmul(aruco1_baselink,np.array([0,-1.2,0,1]))
                #print(xcon)

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad - np.pi)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[2] = goalpose
                self.turn_goals_odom[2] = self.tf_listener.transformPose("odom", goalpose)

                xcon = np.matmul(aruco1_baselink,np.array([-0.2,-1.2,0,1]))
                #print(xcon)

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad - np.pi)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[3] = goalpose
                self.turn_goals_odom[3] = self.tf_listener.transformPose("odom", goalpose)

                #print(xcon)
                
                for i in range(4):
                    
                    marker = Marker()
                    marker.header.frame_id = "odom"
                    marker.id = i
                    marker.type = 2
                    marker.action = marker.ADD
                    marker.pose = self.turn_goals_odom[i].pose
                    marker.color.r = 0.3
                    marker.color.g = 0.0
                    marker.color.b = 1.0
                    marker.color.a = 1.0
                    marker.scale.x = 0.1
                    marker.scale.y = 0.1
                    marker.scale.z = 0.1
                    marker.frame_locked = False
                    marker.ns = "Goal-%u"%i
                    goalmarkers.markers.append(marker) 

                self.aruco_goal_array_pub.publish(goalmarkers)
            

            
    def UpdateArucoU(self, marker_pose):

        # should be incremented here

        if self.allow_aruco_callbacks:

            self.aruco_new = True

            goalmarkers = MarkerArray()

            # print("Updating Aruco U")

            #check if new aruco_marker position is out of threshold of self.current_aruco_pos
            # if np.linalg.norm([marker_pose.pose.position.x - self.insight_aruco.pose.position.x, marker_pose.pose.position.y - self.insight_aruco.pose.position.y, marker_pose.pose.position.z - self.insight_aruco.pose.position.z])>self.aruco_update_dist_threshold:
                #if true - store self.current_aruco_loc = aruco_marker.position
            self.insight_aruco = marker_pose  ## Always will be in base_link

            self.tf_listener.waitForTransform("odom", "base_link", marker_pose.header.stamp, rospy.Duration(1))
            self.insight_aruco_odom = self.tf_listener.transformPose("odom", marker_pose)


            if self.pot_lines:
                # self.turn_goals = []

                # arpt = TransformerROS.transformPose("base_link", self.insight_aruco)
                a = self.insight_aruco.pose.position.x
                b = self.insight_aruco.pose.position.y

                A = np.array([[self.m, -1],[1, self.m]],)
                b = np.array([-self.c, self.m*b + a])

                X = np.linalg.solve(A,b)
                rad = np.arctan(self.m)

                goalpose = PoseStamped()

                goalpose.header.stamp = self.insight_aruco.header.stamp
                goalpose.header.frame_id = '/base_link'

                aruco1_baselink = np.array([[np.cos(rad), -np.sin(rad), X[0]],[np.sin(rad), np.cos(rad), X[1]], [0, 0, 1]])

                goalpose.pose.position.x = X[0]
                goalpose.pose.position.y = X[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)

                self.turn_goals[0] = goalpose
                self.turn_goals_odom[0] = self.tf_listener.transformPose("odom", goalpose)

                xcon = np.matmul(aruco1_baselink,np.array([0.1,0.1,1]))          

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad + np.pi/2)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[1] = goalpose
                self.turn_goals_odom[1] = self.tf_listener.transformPose("odom", goalpose)


                xcon = np.matmul(aruco1_baselink,np.array([0.1,0.1,1]))  

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad + np.pi)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[2] = goalpose
                self.turn_goals_odom[2] = self.tf_listener.transformPose("odom", goalpose)

                xcon = np.matmul(aruco1_baselink,np.array([-0.2,0.1,1]))  

                goalpose.pose.position.x = xcon[0]
                goalpose.pose.position.y = xcon[1]
                goalpose.pose.position.z =  0
                orientation = quaternion_from_euler(0,0,rad + np.pi)
                goalpose.pose.orientation.x = orientation[0]
                goalpose.pose.orientation.y = orientation[1]
                goalpose.pose.orientation.z = orientation[2]
                goalpose.pose.orientation.w = orientation[3]
                # glpt = TransformerROS.transformPose("odom", goalpose)
                self.turn_goals[3] = goalpose
                self.turn_goals_odom[3] = self.tf_listener.transformPose("odom", goalpose)


                for i in range(4):
                    
                    marker = Marker()
                    marker.header.frame_id = "odom"
                    marker.id = i
                    marker.type = 2
                    marker.action = marker.ADD
                    marker.pose = self.turn_goals_odom[i].pose
                    marker.color.r = 0.3
                    marker.color.g = 0.0
                    marker.color.b = 1.0
                    marker.color.a = 1.0
                    marker.scale.x = 0.1
                    marker.scale.y = 0.1
                    marker.scale.z = 0.1
                    marker.frame_locked = False
                    marker.ns = "Goal-%u"%i
                    goalmarkers.markers.append(marker) 

                self.aruco_goal_array_pub.publish(goalmarkers)
        #id=69


    """TO BE DONE LATER WHEN DETECTIONS ARE MADE AVAILABLE"""
    def UpdateDetections(self, detection):

        #From the detection that we just received, we extract the waypoint
        #that is parallel to the guide vector aligined with the pots

        print("Received a cluster detection")

        if self.pot_lines:

            a = detection.pose.position.x
            b = detection.pose.position.y

            A = np.array([[self.m, -1],[1, self.m]],)
            b = np.array([-self.c, self.m*b + a])

            X = np.linalg.solve(A,b)
            rad = np.arctan(self.m)

            link_in_base_transform = self.tf2_buffer.lookup_transform('base_link', 'link_lift', rospy.Time(0))

            goalpose = PoseStamped()

            goalpose.header.frame_id = "base_link"
            goalpose.pose.position.x = X[0] + link_in_base_transform.transform.translation.x
            goalpose.pose.position.y = X[1]
            goalpose.pose.position.z =  0
            orientation = quaternion_from_euler(0,0,rad)
            goalpose.pose.orientation.x = orientation[0]
            goalpose.pose.orientation.y = orientation[1]
            goalpose.pose.orientation.z = orientation[2]
            goalpose.pose.orientation.w = orientation[3]
            # glpt = TransformerROS.transformPose("odom", goalpose)
            # self.detection_goals.append(goalpose)

            if self.detection_exes==[]:
                self.detection_exes.append(detection.pose.position.x)
                self.detection_list.append(detection)
                self.detection_goals.append(goalpose)

            else:
                ind = bisect.bisect(self.detection_exes,detection.pose.position.x)
                self.detection_exes.insert(ind, detection.pose.position.x)
                self.detection_list.insert(ind, detection)
                self.detection_goals.insert(ind, goalpose)

        
 
    def main(self):
        rospy.init_node('waypoint_accumulator_publisher', anonymous=True)
        self.movebase_client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
        self.tf_listener = tf.TransformListener(rospy.Duration(100))

        self.tf2_buffer = tf2_ros.Buffer()
        self.tf2_listener = tf2_ros.TransformListener(self.tf2_buffer)
        


if __name__ == '__main__':

    try:
        node = NavPlanner()
        node.main()
        r = rospy.Rate(node.rate)

        time.sleep(5)

        odom_subscriber = rospy.Subscriber('/odom', Odometry, node.odom_update)

        pot_line_sub = rospy.Subscriber('/guide_vector_base', PotLine, node.UpdateLine)

        #TODO: change aruco topic to be in baselink!!!!!!!!
        aruco_sub1 = rospy.Subscriber('/aruco_simple/pose1', PoseStamped, node.UpdateArucoEnd)

        #TODO: change aruco topic to be in baselink!!!!!!!!!!!
        aruco_sub2 = rospy.Subscriber('/aruco_simple/pose2', PoseStamped, node.UpdateArucoU)

        #TODO: change detection list topic
        detection_sub = rospy.Subscriber('/detections', PoseStamped, node.UpdateDetections)

        
        while not rospy.is_shutdown():
            # r.sleep()
            
            node.PickAWaypoint()
            

        rospy.spin()

    except KeyboardInterrupt:
        rospy.loginfo('interrupt received bro!!! Gotcha!')
