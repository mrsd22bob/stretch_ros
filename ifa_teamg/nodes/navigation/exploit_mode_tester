#!/usr/bin/env python

from logging.config import valid_ident
from re import X

import time

from cv2 import line
import rospy
from std_srvs.srv import Trigger, TriggerRequest
from sensor_msgs.msg import JointState, PointCloud2, LaserScan
from control_msgs.msg import FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist, PoseStamped, PointStamped
from nav_msgs.msg import Path
from ifa_teamg.msg import PotLine
from visualization_msgs.msg import MarkerArray, Marker

from move_base_msgs.msg import MoveBaseActionGoal

import bisect

#for quaternion tranformation from Euler to Quaternion
from tf.transformations import quaternion_from_euler

from scipy import optimize

import math
import ros_numpy as rnp
# from ros_numpy import point_cloud2
import numpy as np

import tf

import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal


class TestExploit():

    def __init__(self):

        self.rate = 10.0

        #Test publisher for cluser locations
        self.cluster_loc_pub = rospy.Publisher("/detections", PoseStamped, queue_size=1)

        #Test location cluster 1
        self.point1 = PoseStamped()

        #Test location cluster 2
        self.point2 = PoseStamped()

        #Test location cluster 3
        self.point3 = PoseStamped()

    #def display_test_stats()

    def InitializePoints(self):
        
        self.point1.header.seq = 1
        # self.point1.header.stamp = rospy.Time.now()
        self.point1.header.frame_id = "base_link"
        self.point1.pose.position.x = 0.87
        self.point1.pose.position.y = -0.48
        self.point1.pose.position.z = 1.2

        self.point2.header.seq = 2
        # self.point2.header.stamp = rospy.Time.now()
        self.point2.header.frame_id = "base_link"
        self.point2.pose.position.x = 0.87
        self.point2.pose.position.y = -0.48
        self.point2.pose.position.z = 1.2

        self.point3.header.seq = 3
        # self.point3.header.stamp = rospy.Time.now()
        self.point3.header.frame_id = "base_link"
        self.point3.pose.position.x = 0.87
        self.point3.pose.position.y = -0.48
        self.point3.pose.position.z = 1.2

        self.points = [self.point1, self.point2, self.point3]



    def PublishAPoint(self, call_count):
        self.point1.header.stamp = rospy.Time.now()
        self.cluster_loc_pub.publish(self.points[call_count])
        call_count+=1
        
        return call_count

 
    def main(self):
        rospy.init_node('exploit_mode_tester', anonymous=True)
        self.tf_listener = tf.TransformListener(rospy.Duration(100))
        


if __name__ == '__main__':

    try:
        node = TestExploit()
        node.main()
        node.InitializePoints()

        r = rospy.Rate(node.rate)

        call_count = 0

        time.sleep(4)

        call_count = node.PublishAPoint(call_count)

        time.sleep(20)

        call_count = node.PublishAPoint(call_count)

        time.sleep(20)

        call_count = node.PublishAPoint(call_count)

        # while not rospy.is_shutdown():
            
        #     node.PublishAPoint()
        rospy.spin()

    except KeyboardInterrupt:
        rospy.loginfo('Interrupt received bro!!! Gotcha!')
